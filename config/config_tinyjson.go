// Code generated by tinyjson for marshaling/unmarshaling. DO NOT EDIT.

package config

import (
	tinyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ tinyjson.Marshaler
)

func tinyjson79908536DecodeGithubComGetlanternTinyShadowsocksConfig(in *jlexer.Lexer, out *Config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "remote_addr":
			out.RemoteAddr = string(in.String())
		case "remote_port":
			out.RemotePort = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "method":
			out.Method = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson79908536EncodeGithubComGetlanternTinyShadowsocksConfig(out *jwriter.Writer, in Config) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"remote_addr\":"
		out.RawString(prefix[1:])
		out.String(string(in.RemoteAddr))
	}
	{
		const prefix string = ",\"remote_port\":"
		out.RawString(prefix)
		out.String(string(in.RemotePort))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Config) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson79908536EncodeGithubComGetlanternTinyShadowsocksConfig(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Config) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson79908536EncodeGithubComGetlanternTinyShadowsocksConfig(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Config) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson79908536DecodeGithubComGetlanternTinyShadowsocksConfig(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Config) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson79908536DecodeGithubComGetlanternTinyShadowsocksConfig(l, v)
}
